/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.jra.sampleecommerce.api;

import com.jra.sampleecommerce.api.model.NewOrder;
import com.jra.sampleecommerce.api.model.OrderDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Validated
@Tag(name = "Order", description = "Operation about orders")
public interface OrderApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/orders : Creates a new order for the given order request
     * Creates a new order for the given order request.
     *
     * @param newOrder New Order Request object (optional)
     * @return Order added successfully (status code 201)
     *         or If payment is not authorized. (status code 406)
     */
    @Operation(
        operationId = "addOrder",
        summary = "Creates a new order for the given order request",
        responses = {
            @ApiResponse(responseCode = "201", description = "Order added successfully", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = OrderDTO.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDTO.class))
            }),
            @ApiResponse(responseCode = "406", description = "If payment is not authorized.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/orders",
        produces = { "application/xml", "application/json" },
        consumes = { "application/xml", "application/json" }
    )
    ResponseEntity<OrderDTO> addOrder(
        @Parameter(name = "NewOrder", description = "New Order Request object") @Valid @RequestBody(required = false) NewOrder newOrder
    );


    /**
     * GET /api/v1/orders/{id} : Returns the order of given order ID
     * Returns orders of given order ID
     *
     * @param id OrderDTO Identifier (required)
     * @return If order exists. (status code 200)
     *         or Order doesn&#39;t exist for given user. (status code 404)
     */
    @Operation(
        operationId = "getByOrderId",
        summary = "Returns the order of given order ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "If order exists.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = OrderDTO.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Order doesn't exist for given user.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/{id}",
        produces = { "application/xml", "application/json" }
    )
    ResponseEntity<OrderDTO> getByOrderId(
        @Parameter(name = "id", description = "OrderDTO Identifier", required = true) @PathVariable("id") String id
    );


    /**
     * GET /api/v1/orders : Returns the orders of given user
     * Returns orders of given user
     *
     * @param customerId Customer Identifier (required)
     * @return If order exists. (status code 200)
     *         or OrderDTO doesn&#39;t exist for given user. (status code 404)
     */
    @Operation(
        operationId = "getOrdersByCustomerId",
        summary = "Returns the orders of given user",
        responses = {
            @ApiResponse(responseCode = "200", description = "If order exists.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = OrderDTO.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "OrderDTO doesn't exist for given user.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders",
        produces = { "application/xml", "application/json" }
    )
    ResponseEntity<List<OrderDTO>> getOrdersByCustomerId(
        @NotNull @Parameter(name = "customerId", description = "Customer Identifier", required = true) @Valid @RequestParam(value = "customerId", required = true) String customerId
    );

}
