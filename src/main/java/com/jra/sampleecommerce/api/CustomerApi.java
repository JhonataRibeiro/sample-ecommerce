/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.jra.sampleecommerce.api;

import com.jra.sampleecommerce.api.model.AddressDTO;
import com.jra.sampleecommerce.api.model.CardDTO;
import com.jra.sampleecommerce.api.model.UserDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Validated
@Tag(name = "Customer", description = "Operations about user's persona customer")
public interface CustomerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/v1/customers/{id} : Deletes the customer
     * Deletes the customer identifiable by given ID
     *
     * @param id Customer Identifier (required)
     * @return Request accepted, returns this status even if user does not exist (status code 202)
     */
    @Operation(
            operationId = "deleteCustomerById",
            summary = "Deletes the customer",
            responses = {
                    @ApiResponse(responseCode = "202", description = "Request accepted, returns this status even if user does not exist")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/api/v1/customers/{id}"
    )
    ResponseEntity<Void> deleteCustomerById(
            @Parameter(name = "id", description = "Customer Identifier", required = true) @PathVariable("id") String id
    );


    /**
     * GET /api/v1/customers/{id}/addresses : Returns all customer&#39;s addresses
     * Returns all customer&#39;s addresses based on given customer ID
     *
     * @param id Customer Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
            operationId = "getAddressesByCustomerId",
            summary = "Returns all customer's addresses",
            responses = {
                    @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = AddressDTO.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = AddressDTO.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/customers/{id}/addresses",
            produces = {"application/xml", "application/json"}
    )
    ResponseEntity<List<AddressDTO>> getAddressesByCustomerId(
            @Parameter(name = "id", description = "Customer Identifier", required = true) @PathVariable("id") String id
    );


    /**
     * GET /api/v1/customers : Returns all customers
     * Returns all customers, or empty collection if no use found
     *
     * @return For successful fetch. (status code 200)
     */
    @Operation(
            operationId = "getAllCustomers",
            summary = "Returns all customers",
            responses = {
                    @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = UserDTO.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/customers",
            produces = {"application/xml", "application/json"}
    )
    ResponseEntity<List<UserDTO>> getAllCustomers();


    /**
     * GET /api/v1/customers/{id}/cards : Returns all customer&#39;s cards
     * Returns all customer&#39;s cards based on given customer ID
     *
     * @param id Customer Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
            operationId = "getCardByCustomerId",
            summary = "Returns all customer's cards",
            responses = {
                    @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = CardDTO.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = CardDTO.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/customers/{id}/cards",
            produces = {"application/xml", "application/json"}
    )
    ResponseEntity<CardDTO> getCardByCustomerId(
            @Parameter(name = "id", description = "Customer Identifier", required = true) @PathVariable("id") String id
    );


    /**
     * GET /api/v1/customers/{id} : Returns a customer
     * Returns a customers identifiable by given ID
     *
     * @param id Customer Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @Operation(
            operationId = "getCustomerById",
            summary = "Returns a customer",
            responses = {
                    @ApiResponse(responseCode = "200", description = "For successful fetch.", content = {
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = UserDTO.class)),
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/customers/{id}",
            produces = {"application/xml", "application/json"}
    )
    ResponseEntity<UserDTO> getCustomerById(
            @Parameter(name = "id", description = "Customer Identifier", required = true) @PathVariable("id") String id
    );

}
